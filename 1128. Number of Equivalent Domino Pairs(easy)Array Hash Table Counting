1128. Number of Equivalent Domino Pairs
Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.
Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j]

Example 1:
Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1

Example 2:
Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]
Output: 3

Constraints:
1 <= dominoes.length <= 4 * 104
dominoes[i].length == 2
1 <= dominoes[i][j] <= 9

class Solution {
    public int numEquivDominoPairs(int[][] dominoes) {
        int[][] dp = new int[10][10];
        for(int[] domino : dominoes){
            dp[domino[0]][domino[1]]++;
        }
        int max = 0;
        for(int i = 1; i < dp.length; i++){
            for(int j = i; j < dp[i].length; j++){
                int count = dp[i][j];
                if(i != j){
                    count += dp[j][i];
                }
                max += count * (count - 1) / 2;
            }
        }
        return max;
    }
}



    
//      0   1   2   3   4   5   6   7   8   9

// 0    0   0   0   0   0   0   0   0   0   0
        
// 1    0   1   3   0   0   0   0   0   0   0
        
// 2    0   0   1   0   0   0   0   0   0   0
        
// 3    0   0   0   0   0   0   0   0   0   0
        
// 4    0   0   0   0   0   0   0   0   0   0
        
// 5    0   0   0   0   0   0   0   0   0   0
        
// 6    0   0   0   0   0   0   0   0   0   0
        
// 7    0   0   0   0   0   0   0   0   0   0
        
// 8    0   0   0   0   0   0   0   0   0   0
        
// 9    0   0   0   0   0   0   0   0   0   0
