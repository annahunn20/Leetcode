1140. Stone Game II
Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones. 
Alice and Bob take turns, with Alice starting first.  Initially, M = 1.
On each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X).
The game continues until all the stones have been taken.
Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.

Example 1:
Input: piles = [2,7,9,4,4]
Output: 10
Explanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. 

Example 2:
Input: piles = [1,2,3,4,5,100]
Output: 104

class Solution {
    public int stoneGameII(int[] piles) {
        final int n = piles.length;

        // dp[i][j] := max # of stones Alice can get starting from index i with M = j
        dp = new int[n][n];

        // suffixSum[i] := sum of piles[i:] (sum of all piles from index i to the end)
        suffixSum = piles.clone();

        // Populate suffixSum array
        for (int i = n - 2; i >= 0; --i)
            suffixSum[i] += suffixSum[i + 1];

        return stoneGameII(0, 1);
    }

    private int[][] dp;
    private int[] suffixSum;

    private int stoneGameII(int i, int M) {
        if (i + 2 * M >= dp.length)
            return suffixSum[i];

        if (dp[i][M] > 0)
            return dp[i][M];

        int opponent = Integer.MAX_VALUE;

        // Try taking X piles where 1 <= X <= 2 * M
        for (int X = 1; X <= 2 * M; ++X)
            opponent = Math.min(opponent, stoneGameII(i + X, Math.max(M, X)));

        return dp[i][M] = suffixSum[i] - opponent;
    }
}
