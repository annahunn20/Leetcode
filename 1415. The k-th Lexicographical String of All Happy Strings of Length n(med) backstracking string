1415. The k-th Lexicographical String of All Happy Strings of Length n
A happy string is a string that:
consists only of letters of the set ['a', 'b', 'c'].
s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).
For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.
Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.
Return the kth string of this list or return an empty string if there are less than k happy strings of length n.

Example 1:
Input: n = 1, k = 3
Output: "c"
Explanation: The list ["a", "b", "c"] contains all happy strings of length 1. The third string is "c".

Example 2:
Input: n = 1, k = 4
Output: ""
Explanation: There are only 3 happy strings of length 1.

Example 3:
Input: n = 3, k = 9
Output: "cab"
Explanation: There are 12 different happy string of length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab", "cac", "cba", "cbc"]. You will find the 9th string = "cab"

class Solution {
    private String ans = "";

    private void solve(int len, int[] cnt, int n, char[] chars, StringBuilder s) {
        if (len == n) {
            if (--cnt[0] == 0) {
                ans = s.toString();
            }
            return;
        }
        for (char c : chars) {
            if (len == 0 || s.charAt(len - 1) != c) {
                s.append(c);
                solve(len + 1, cnt, n, chars, s);
                s.deleteCharAt(s.length() - 1);
                if (cnt[0] == 0) return; // Stop recursion early
            }
        }
    }

    public String getHappyString(int n, int k) {
        ans = "";
        solve(0, new int[]{k}, n, new char[]{'a', 'b', 'c'}, new StringBuilder());
        return ans;
    }
}
