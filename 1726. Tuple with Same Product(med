1726. Tuple with Same Product

Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.
Example 1:

Input: nums = [2,3,4,6]
Output: 8
Explanation: There are 8 valid tuples:
(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)
(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)

Example 2:
Input: nums = [1,2,4,5,10]
Output: 16
Explanation: There are 16 valid tuples:
(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)
(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)
(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)
(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)
 

class Solution {
    public int tupleSameProduct(int[] nums) {
        int n = nums.length;
        
        // Map to store product -> frequency
        Map<Integer, Integer> productFreq = new HashMap<>();
        
        // Calculate products for all pairs (i,j) where i < j
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                int product = nums[i] * nums[j];
                productFreq.merge(product, 1, Integer::sum);
            }
        }
        
        int result = 0;
        
        // For each product frequency, calculate number of valid tuples
        for (int freq : productFreq.values()) {
            if (freq > 1) {
                // For each pair of pairs with same product:
                // We can form 8 different tuples by permuting elements
                // (a,b,c,d), (a,b,d,c), (b,a,c,d), (b,a,d,c)
                // (c,d,a,b), (c,d,b,a), (d,c,a,b), (d,c,b,a)
                result += freq * (freq - 1) * 4;
            }
        }
        
        return result;
    }
}
