2033. Minimum Operations to Make a Uni-Value Grid
You are given a 2D integer grid of size m x n and an integer x. In one operation, you can add x to or subtract x from any element in the grid.
A uni-value grid is a grid where all the elements of it are equal.
Return the minimum number of operations to make the grid uni-value. If it is not possible, return -1.

Example 1:
Input: grid = [[2,4],[6,8]], x = 2
Output: 4
Explanation: We can make every element equal to 4 by doing the following: 
- Add x to 2 once.
- Subtract x from 6 once.
- Subtract x from 8 twice.
A total of 4 operations were used.

Example 2:
Input: grid = [[1,5],[2,3]], x = 1
Output: 5
Explanation: We can make every element equal to 3.

Example 3:
Input: grid = [[1,2],[3,4]], x = 2
Output: -1
Explanation: It is impossible to make every element equal.

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 105
1 <= m * n <= 105
1 <= x, grid[i][j] <= 104

class Solution {
    public int minOperations(int[][] grid, int x) {

        int m = grid.length, n = grid[0].length;

        int len = m * n;
        if(len < 2) return 0;
        
        int[] count = new int[10001];

        int totalSum = 0;
        int r = grid[0][0] % x;
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                int v = grid[i][j];
                if(v % x != r) return -1;
                count[v]++;
            } 
        }
        
        len = (len + 1) / 2;
        int total = 0;
        int median = 0;

        for(int v = 0; v < count.length; ++v){
            if(count[v] == 0) continue;
            total += count[v];
            if(total >= len){
                median = v;
                break;
            }
        }
        
        int ans = 0;
        for(int v = 0; v <= median; ++v){
            if(count[v] == 0) continue;
            ans += count[v] * (median - v) / x;
        }

        for(int v = median + 1; v < count.length; ++v){
            if(count[v] == 0) continue;
            ans += count[v] * (v - median) / x;
        }        
        return ans;
    }
}
