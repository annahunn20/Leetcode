2257. Count Unguarded Cells in the Grid
You are given two integers m and n representing a 0-indexed m x n grid. You are also given two 2D integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively.
A guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. A cell is guarded if there is at least one guard that can see it.
Return the number of unoccupied cells that are not guarded.

Example 1:
Input: m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]
Output: 7
Explanation: The guarded and unguarded cells are shown in red and green respectively in the above diagram.
There are a total of 7 unguarded cells, so we return 7.

Example 2:
Input: m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]
Output: 4
Explanation: The unguarded cells are shown in green in the above diagram.
There are a total of 4 unguarded cells, so we return 4.

class Solution {
    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {
        int[][] grid = new int[m][n];
        int x, y;
        for (int[] guard : guards) {
            grid[guard[0]][guard[1]] = 1;
        }
        for (int[] wall : walls) {
            grid[wall[0]][wall[1]] = 1;
        }
        int count = 0;
        for (int[] guard : guards) {
            x = guard[0] - 1;
            y = guard[1];
            while (x >= 0 && grid[x][y] != 1) {
                if (grid[x][y] != -1) {
                    count++;
                    grid[x][y] = -1;
                }
                x--;
            }
            x = guard[0] + 1;
            while (x < m && grid[x][y] != 1) {
                if (grid[x][y] != -1) {
                    count++;
                    grid[x][y] = -1;
                }
                x++;
            }
            x = guard[0];
            y = guard[1] - 1;
            while (y >= 0 && grid[x][y] != 1) {
                if (grid[x][y] != -1) {
                    count++;
                    grid[x][y] = -1;
                }
                y--;
            }
            y = guard[1] + 1;
            while (y < n && grid[x][y] != 1) {
                if (grid[x][y] != -1) {
                    count++;
                    grid[x][y] = -1;
                }
                y++;
            }
        }
        return m * n - guards.length - walls.length - count;
    }
}
