2290. Minimum Obstacle Removal to Reach Corner
You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:
0 represents an empty cell,
1 represents an obstacle that may be removed.
You can move up, down, left, or right from and to an empty cell.
Return the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).

Example 1:
Input: grid = [[0,1,1],[1,1,0],[1,1,0]]
Output: 2
Explanation: We can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2).
It can be shown that we need to remove at least 2 obstacles, so we return 2.
Note that there may be other ways to remove 2 obstacles to create a path.

Example 2:
Input: grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]
Output: 0
Explanation: We can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0.

public class Solution {
    public int[][] dir = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

    public int minimumObstacles(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        // Deque for 0-1 BFS
        Deque<int[]> dq = new ArrayDeque<>();
        dq.add(new int[]{0, 0, 0}); // {row, col, obstacleCount}
        grid[0][0] = -1; // Mark as visited

        while (!dq.isEmpty()) {
            int[] temp = dq.pollFirst();
            int r = temp[0], c = temp[1], obstacle = temp[2];

            // If we've reached the bottom-right corner, return the obstacle count
            if (r == n - 1 && c == m - 1) {
                return obstacle;
            }

            // Explore all 4 directions
            for (int[] d : dir) {
                int row = r + d[0];
                int col = c + d[1];

                if (isValid(row, col, n, m) && grid[row][col] != -1) {
                    if (grid[row][col] == 0) {
                        // Free cell, prioritize by adding to the front
                        dq.addFirst(new int[]{row, col, obstacle});
                    } else {
                        // Obstacle cell, add to the back
                        dq.addLast(new int[]{row, col, obstacle + 1});
                    }
                    // Mark as visited
                    grid[row][col] = -1;
                }
            }
        }

        return -1; // If no path exists (unlikely in a valid grid)
    }

    public boolean isValid(int i, int j, int n, int m) {
        return i >= 0 && j >= 0 && i < n && j < m;
    }
}
