2381. Shifting Letters II
You are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0.
Shifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z').
Return the final string after all such shifts to s are applied.

Example 1:
Input: s = "abc", shifts = [[0,1,0],[1,2,1],[0,2,1]]
Output: "ace"
Explanation: Firstly, shift the characters from index 0 to index 1 backward. Now s = "zac".
Secondly, shift the characters from index 1 to index 2 forward. Now s = "zbd".
Finally, shift the characters from index 0 to index 2 forward. Now s = "ace".

Example 2:
Input: s = "dztz", shifts = [[0,0,0],[1,1,1]]
Output: "catz"
Explanation: Firstly, shift the characters from index 0 to index 0 backward. Now s = "cztz".
Finally, shift the characters from index 1 to index 1 forward. Now s = "catz".

class Solution {
    public String shiftingLetters(String s, int[][] shifts) {
        char arr[]=s.toCharArray();
        int[] map=new int[arr.length+1];
        for(int[] num:shifts){
            if(num[2]==0){
                map[num[0]]-=1;
                map[num[1]+1]+=1;
            }else{
                map[num[0]]+=1;
                map[num[1]+1]-=1;
            }
        }
        int sum=0;
        for(int i=0;i<arr.length;i++){
            sum+=map[i];
            int n=((arr[i]-'a')+sum)%26;
            if(n<0) n+=26;
            arr[i]=(char)(n+'a');
        }
        return new String(arr);
    }
}
