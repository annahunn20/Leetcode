3152. Special Array II
An array is considered special if every pair of its adjacent elements contains two numbers with different parity.
You are given an array of integer nums and a 2D integer matrix queries, where for queries[i] = [fromi, toi] your task is to check that 
subarray
nums[fromi..toi] is special or not.
Return an array of booleans answer such that answer[i] is true if nums[fromi..toi] is special.

Example 1:
Input: nums = [3,4,1,2,6], queries = [[0,4]]
Output: [false]
Explanation:
The subarray is [3,4,1,2,6]. 2 and 6 are both even.

Example 2:
Input: nums = [4,3,1,6], queries = [[0,2],[2,3]]
Output: [false,true]
Explanation:
The subarray is [4,3,1]. 3 and 1 are both odd. So the answer to this query is false.
The subarray is [1,6]. There is only one pair: (1,6) and it contains numbers with different parity. So the answer to this query is true.

class Solution {
    // public boolean[] isArraySpecial(int[] nums, int[][] queries) {
    //     int n = queries.length;
    //     int[][] q = new int[n][3];
    //     for(int i=0;i<n;i++){
    //         q[i][0] = queries[i][0];
    //         q[i][1] = queries[i][1];
    //         q[i][2] = i;
    //     }
    //     Arrays.sort(q, (a,b) -> a[0]==b[0] ? a[1]-b[1] : a[0]-b[0]);
    //     List<int[]> disparity = new ArrayList<>();
    //     for(int i=1;i<nums.length;i++){
    //         if((nums[i]-nums[i-1])%2==0){
    //             disparity.add(new int[]{i-1,i});
    //         }
    //     }
    //     int j = 0;
    //     boolean[] res = new boolean[n];
    //     for(int i=0;i<n;i++){
    //         while(j<disparity.size() && q[i][0]>=disparity.get(j)[1]){
    //             j++;
    //         }
    //         if(j<disparity.size() && q[i][0]<=disparity.get(j)[0] && q[i][1]>=disparity.get(j)[1]){
    //             res[q[i][2]] = false;
    //         } else {
    //             res[q[i][2]] = true;
    //         }
    //     }
    //     return res; 
    // }

    public boolean[] isArraySpecial(int[] nums, int[][] queries) {
        int[] prefix = new int[nums.length];
        for(int i=1;i<nums.length;i++){
            if((nums[i]-nums[i-1])%2==0){
                prefix[i] = prefix[i-1]+1;
            } else {
                prefix[i] = prefix[i-1];
            }
        }
        boolean[] res = new boolean[queries.length];
        for(int i=0;i<queries.length;i++){
           int start = queries[i][0], end = queries[i][1];
           if(prefix[end]==prefix[start])
           res[i] = true;
        }
        return res;
    }


}
