3243. Shortest Distance After Road Addition Queries I
You are given an integer n and a 2D integer array queries.
There are n cities numbered from 0 to n - 1. Initially, there is a unidirectional road from city i to city i + 1 for all 0 <= i < n - 1.
queries[i] = [ui, vi] represents the addition of a new unidirectional road from city ui to city vi. After each query, you need to find the length of the shortest path from city 0 to city n - 1.
Return an array answer where for each i in the range [0, queries.length - 1], answer[i] is the length of the shortest path from city 0 to city n - 1 after processing the first i + 1 queries.

Example 1:
Input: n = 5, queries = [[2,4],[0,2],[0,4]]
Output: [3,2,1]
Explanation:
After the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3.
After the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2.
After the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1.

Example 2:
Input: n = 4, queries = [[0,3],[0,2]]
Output: [1,1]
Explanation:
After the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1.
After the addition of the road from 0 to 2, the length of the shortest path remains 1.

class Solution {
    public int[] shortestDistanceAfterQueries(final int n, final int[][] queries) {
        final int[][] children = initialChildren(n, queries);

        final int[] distFromZero = new int[n];
        for (int i = 1; i < n; ++i) {
            distFromZero[i] = i;
        }

        final int[] bfsPad = new int[n];

        final int[] result = new int[queries.length];

        for (int q = 0; q < queries.length; ++q) {
            final int u = queries[q][0];
            final int v = queries[q][1];
            for (int c = 0; ; ++c) {
                if (children[u][c] == 0) {
                    children[u][c] = v;
                    break;
                }
            }
            bfsPad[0] = u;
            for (int bfsNext = 0, bfsEnd = 1; bfsNext < bfsEnd; ) {
                final int currNode = bfsPad[bfsNext++];
                for (final int nextNode : children[currNode]) {
                    if (nextNode == 0) {
                        break;
                    }
                    if (distFromZero[nextNode] <= distFromZero[currNode] + 1) {
                        continue;
                    }
                    distFromZero[nextNode] = distFromZero[currNode] + 1;
                    bfsPad[bfsEnd++] = nextNode;
                }
            }
            result[q] = distFromZero[n-1];
        }
        return result;
    }

    private int[][] initialChildren(final int n, final int[][] queries) {
        final int[] numChildren = new int[n];
        Arrays.fill(numChildren, 1);
        numChildren[n-1] = 0;

        for (final int[] query : queries) {
            final int u = query[0];
            numChildren[u]++;
        }

        final int[][] children = new int[n][];
        for (int i = 0; i < n - 1; ++i) {
            children[i] = new int[numChildren[i]];
            children[i][0] = i + 1;
        }
        assert numChildren[n-1] == 0;
        children[n-1] = new int[0];
        return children;
    }
}
