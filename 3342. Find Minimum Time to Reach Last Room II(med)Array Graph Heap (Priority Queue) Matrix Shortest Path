3342. Find Minimum Time to Reach Last Room II
There is a dungeon with n x m rooms arranged as a grid.
You are given a 2D array moveTime of size n x m, where moveTime[i][j] represents the minimum time in seconds when you can start moving to that room. You start from the room (0, 0) at time t = 0 and can move to an adjacent room. Moving between adjacent rooms takes one second for one move and two seconds for the next, alternating between the two.
Return the minimum time to reach the room (n - 1, m - 1).
Two rooms are adjacent if they share a common wall, either horizontally or vertically.

Example 1:
Input: moveTime = [[0,4],[4,4]]
Output: 7
Explanation:
The minimum time required is 7 seconds.
At time t == 4, move from room (0, 0) to room (1, 0) in one second.
At time t == 5, move from room (1, 0) to room (1, 1) in two seconds.

Example 2:

Input: moveTime = [[0,0,0,0],[0,0,0,0]]

Output: 6

Explanation:

The minimum time required is 6 seconds.

At time t == 0, move from room (0, 0) to room (1, 0) in one second.
At time t == 1, move from room (1, 0) to room (1, 1) in two seconds.
At time t == 3, move from room (1, 1) to room (1, 2) in one second.
At time t == 4, move from room (1, 2) to room (1, 3) in two seconds.
Example 3:

Input: moveTime = [[0,1],[1,2]]

Output: 4

 

Constraints:

2 <= n == moveTime.length <= 750
2 <= m == moveTime[i].length <= 750
0 <= moveTime[i][j] <= 109

/* Copyright (c) 2024 by https://leetcode.com/brinuke/. All rights reserved. */
class Solution {
	private static class Room implements Comparable<Room> {
		final int openTime;
		final boolean longStay;
		Room[] adjacent;
		Room next;

		Room() {
			openTime = Integer.MAX_VALUE;
			longStay = true;
		}

		Room(int openTime, boolean longStay) {
			this.openTime = openTime;
			this.longStay = longStay;
			next = this; // indicates that this Room hasn't been approached yet
		}

		@Override
		public int compareTo(Room other) {
			return openTime - other.openTime;
		}
	}

	private static final Room DUMMY_ROOM = new Room();

	private static Room initRooms(int[][] moveTime) {
		int n = moveTime.length;
		int m = moveTime[0].length;
		Room[][] rooms = new Room[n][m];
		for (int i = 0; i < n; i++) {
			int[] mtRow = moveTime[i];
			Room[] rRow = rooms[i];
			for (int j = 0; j < m; j++)
				rRow[j] = new Room(mtRow[j], ((i + j) & 1) == 0);
		}
		Room[] dummyRow = new Room[m];
		Arrays.fill(dummyRow, DUMMY_ROOM);
		Room[] prevRow = dummyRow;
		Room[] curRow = rooms[0];
		n--;
		m--;
		for (int i = 0; i <= n; i++) {
			Room[] nextRow = i < n ? rooms[i + 1] : dummyRow;
			Room prev = DUMMY_ROOM;
			Room cur = curRow[0];
			for (int j = 0; j <= m; j++) {
				Room next = j < m ? curRow[j + 1] : DUMMY_ROOM;
				cur.adjacent = new Room[] { prev, prevRow[j], next, nextRow[j] };
				prev = cur;
				cur = next;
			}
			prevRow = curRow;
			curRow = nextRow;
		}
		Room start = rooms[0][0];
		start.next = rooms[n][m]; // finish
		return start;
	}

	public static int minTimeToReach(int[][] moveTime) {
		Room start = initRooms(moveTime);
		Room finish = start.next;
		Queue<Room> waitingToEnter = new PriorityQueue<>();
		waitingToEnter.add(DUMMY_ROOM); // guard Room to prevent NPE
		start.next = null;
		Room exitingShortHead = start;
		Room exitingLongHead = null;
		int currentTime = 0;
		while (true) {
			Room exitingLongHeadNew = null;
			while (exitingShortHead != null) {
				for (Room adj : exitingShortHead.adjacent)
					if (adj.next == adj) {
						if (adj == finish)
							return Math.max(currentTime, finish.openTime) + (finish.longStay ? 2 : 1);
						if (adj.openTime <= currentTime) {
							if (adj.longStay) {
								adj.next = exitingLongHeadNew;
								exitingLongHeadNew = adj;
							} else {
								adj.next = exitingLongHead;
								exitingLongHead = adj;
							}
						} else {
							adj.next = null;
							waitingToEnter.offer(adj);
						}
					}
				exitingShortHead = exitingShortHead.next;
			}
			exitingShortHead = exitingLongHead;
			exitingLongHead = exitingLongHeadNew;
			int queueTime;
			while ((queueTime = waitingToEnter.peek().openTime) <= currentTime) {
				Room entering = waitingToEnter.poll();
				if (entering.longStay) {
					entering.next = exitingLongHead;
					exitingLongHead = entering;
				} else {
					entering.next = exitingShortHead;
					exitingShortHead = entering;
				}
			}
			if (++currentTime < queueTime && exitingShortHead == null && exitingLongHead == null)
				currentTime = queueTime;
		}
	}
}
