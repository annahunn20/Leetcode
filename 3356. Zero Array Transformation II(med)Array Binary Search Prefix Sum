3356. Zero Array Transformation II
You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].
Each queries[i] represents the following action on nums:
Decrement the value at each index in the range [li, ri] in nums by at most vali.
The amount by which each value is decremented can be chosen independently for each index.
A Zero Array is an array with all its elements equal to 0.
Return the minimum possible non-negative value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k exists, return -1.

Example 1:
Input: nums = [2,0,2], queries = [[0,2,1],[0,2,1],[1,1,3]]
Output: 2
Explanation:
For i = 0 (l = 0, r = 2, val = 1):
Decrement values at indices [0, 1, 2] by [1, 0, 1] respectively.
The array will become [1, 0, 1].
For i = 1 (l = 0, r = 2, val = 1):
Decrement values at indices [0, 1, 2] by [1, 0, 1] respectively.
The array will become [0, 0, 0], which is a Zero Array. Therefore, the minimum value of k is 2.

Example 2:
Input: nums = [4,3,2,1], queries = [[1,3,2],[0,2,1]]
Output: -1
Explanation:
For i = 0 (l = 1, r = 3, val = 2):
Decrement values at indices [1, 2, 3] by [2, 2, 1] respectively.
The array will become [4, 1, 0, 0].
For i = 1 (l = 0, r = 2, val = 1):
Decrement values at indices [0, 1, 2] by [1, 1, 0] respectively.
The array will become [3, 0, 0, 0], which is not a Zero Array.

class Solution {
    //Prefix Sum -O(N+M) & O(N)
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length, sum = 0, k = 0;  // n = size of nums, sum = prefix sum, k = count of used queries
        int[] differenceArray = new int[n + 1];  // Difference array for efficient range updates

        // Iterate through nums
        for (int index = 0; index < n; index++) {
            // Iterate through queries while the current index of nums cannot be reduced to zero
            //sum: Keeps track of the total effect of all previous updates (from difference array).
            //differenceArray[index]: The new update that is being applied at this index.
            //sum + differenceArray[index]: The effective value at index after applying all updates so far.
            while (sum + differenceArray[index] < nums[index]) {  
                k++;  // Increment query usage count

                // If we've used all queries and still can't make nums[index] zero, return -1
                if (k > queries.length) {  
                    return -1;
                }

                // Extract left, right, and value from the next query
                int left = queries[k - 1][0];  
                int right = queries[k - 1][1];  
                int val =  queries[k - 1][2];  

                // Apply range update using the difference array technique
                if (right >= index) {  
                    //This ensures we only apply the update where it's relevant.
                    differenceArray[Math.max(left, index)] += val;  // Add `val` at the max of `left` and `index`

                    //We subtract val at right + 1 to stop the effect after right.
                    differenceArray[right + 1] -= val;  // Subtract `val` at `right + 1` to maintain range effect
                }
            }
            // Update prefix sum at the current index
            sum += differenceArray[index];  
        }
        return k;  // Return the minimum number of queries required
    }
}
