3362. Zero Array Transformation III
You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri].
Each queries[i] represents the following action on nums:
Decrement the value at each index in the range [li, ri] in nums by at most 1.
The amount by which the value is decremented can be chosen independently for each index.
A Zero Array is an array with all its elements equal to 0.
Return the maximum number of elements that can be removed from queries, such that nums can still be converted to a zero array using the remaining queries. If it is not possible to convert nums to a zero array, return -1.

Example 1:
Input: nums = [2,0,2], queries = [[0,2],[0,2],[1,1]]
Output: 1
Explanation:
After removing queries[2], nums can still be converted to a zero array.
Using queries[0], decrement nums[0] and nums[2] by 1 and nums[1] by 0.
Using queries[1], decrement nums[0] and nums[2] by 1 and nums[1] by 0.

Example 2:
Input: nums = [1,1,1,1], queries = [[1,3],[0,2],[1,3],[1,2]]
Output: 2
Explanation:
We can remove queries[2] and queries[3].

Example 3
Input: nums = [1,2,3,4], queries = [[0,3]]
Output: -1
Explanation:
nums cannot be converted to a zero array even after using all the queries.

class Solution {
    public int maxRemoval(int[] nums, int[][] queries) {
        IntPriorityQueue pq = new IntPriorityQueue(queries.length + 1);
        pq.add(-1);
        int[][] ends = ends(nums.length, queries);
        int[] diff = new int[nums.length +1];
        int r = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i > 0) diff[i] += diff[i - 1];
            for (int end : ends[i]) {
                pq.add(end);
            }
            while (diff[i] < nums[i]) {
                int idx = pq.poll();
                if (idx < i) return -1;
                diff[i]++;
                diff[idx + 1]--;
                r++;
            }
        }
        return queries.length - r;
    }

    static int[][] ends(int len, int[][] queries) {
        int[] counts = new int[len];
        for (int[] q : queries) {
            counts[q[0]]++;
        }
        int[][] ends = new int[len][];
        for (int i = 0; i < len; i++) {
            ends[i] = new int[counts[i]];
        }
        for (int[] q : queries) {
            final int q0 = q[0];
            ends[q0][--counts[q0]] = q[1];
        }
        return ends;
    }

    public class IntPriorityQueue {
        public int[] vals;
        private int size;

        IntPriorityQueue(int maxSize) {
            this.vals = new int[maxSize];
        }

        void add(int v) {
            vals[size] = v;
            moveUp(size++);
        }

        int poll() {
            int r = vals[0];
            moveDown(0, vals[--size]);
            return r;
        }

        private void moveDown(int idx, int val) {
            while (true) {
                int l = idx * 2 + 1;
                if (l >= size) break;
                int r = l + 1;
                int toSwap = r < size && vals[r] > vals[l] ? r : l;
                if (val < vals[toSwap]) {
                    vals[idx] = vals[toSwap];
                    idx = toSwap;
                } else {
                    break;
                }
            }
            vals[idx] = val;
        }

        private void moveUp(int idx) {
            while (idx > 0) {
                int parent = (idx - 1) / 2;
                if (vals[idx] <= vals[parent]) {
                    break;
                }
                swap(idx, parent);
                idx = parent;
            }
        }

        void swap(int a, int b) {
            int old = vals[a];
            vals[a] = vals[b];
            vals[b] = old;
        }

        int size() {
            return size;
        }
    }
}
