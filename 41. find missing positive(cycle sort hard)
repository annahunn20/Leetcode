Find missing positive
Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.
You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

Example 1:
Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.

Example 2:
Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.

class Solution {
    public int firstMissingPositive(int[] nums) {
        int i = 0;
        while (i < nums.length) {
            int correct = nums[i] - 1;
            if (nums[i] > 0 && nums[i] <= nums.length && nums[i] != nums[correct]) {
                swap(nums, i, correct);
            } else {
                i++;
            }
        }

        for (int index = 0; index < nums.length; index++) {
            if (nums[index] != index + 1) {
                return index + 1;
            }
        }

        return nums.length + 1;
    }

    static void swap(int[] arr, int f, int s) {
        int t = arr[f];
        arr[f] = arr[s];
        arr[s] = t;
    }
}


# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The goal is to find the smallest missing positive integer from an unsorted array. The approach leverages the idea that the smallest missing positive integer must be between 1 and n + 1, where n is the length of the array. By placing each number in its corresponding index (i.e., 1 in index 0, 2 in index 1, and so on), the correct number should be at the correct index. After rearranging, the first index that does not contain the correct number gives the smallest missing positive integer

# Approach
<!-- Describe your approach to solving the problem. -->
1. Cyclic Sort:
   - Iterate through the array and place each number in its correct position by swapping.
   - If nums[i] is positive and less than or equal to the length of the array and nums[i] is not in its correct position, swap it with the number at its correct position (nums[nums[i] - 1]).

2. Identify Missing Positive:
   - After rearranging the array, iterate through it to find the first position where the index does not match the value. The smallest missing positive integer is index + 1.

3. Return Result:
   - If all positions are correct, the smallest missing positive integer is n + 1.

# Complexity
- Time complexity:
- The while loop runs in O(n) time because each element is moved at most once.
- The for loop also runs in O(n) time to check for the first missing positive.
- Overall, the time complexity is O(n).

- Space complexity:
- The space complexity is O(1) because the algorithm only uses a constant amount of extra space for variables and performs the rearrangement in place

